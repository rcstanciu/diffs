  Sour Cobalt Tardigrade
  
  medium
  
  # Redundant Balance Check in Withdraw Function (Explicit If Statement + Unnecessary Code)
  
- ## Summary
+ ## Summary
?           +
- The withdraw function has a redundant balance check, which could be simplified and made more readable.
+ The withdraw function has a redundant balance check, which could be simplified and made more readable.
?                                                                                                       +
- ## Vulnerability Detail
+ ## Vulnerability Detail
?                        +
- The withdraw function explicitly checks if the balance is greater than 0 before sending anything. This check could be made implicit by directly sending the owner’s share within the require statement. This would reduce the code complexity and improve the readability of the function.
+ The withdraw function explicitly checks if the balance is greater than 0 before sending anything. This check could be made implicit by directly sending the owner’s share within the require statement. This would reduce the code complexity and improve the readability of the function.
?                                                                                                                                                                                                                                                                                           +
- ## Impact
+ ## Impact
?          +
- The redundant balance check could result in lower code quality and maintainability for the contract.
+ The redundant balance check could result in lower code quality and maintainability for the contract.
?                                                                                                     +
- ## Code Snippet
+ ## Code Snippet
?                +
- https://github.com/sherlock-audit/2023-12-footium/blob/main/footium-eth-shareable/contracts/FootiumAcademy.sol#L144-L152
+ https://github.com/sherlock-audit/2023-12-footium/blob/main/footium-eth-shareable/contracts/FootiumAcademy.sol#L144-L152
?                                                                                                                         +
- ## Tool used
+ ## Tool used
?             +
- - Manual Review
+ - Manual Review
?                +
- ## Test case
+ ## Test case
?             +
- ```solidity
+ ```solidity
?            +
- // The contract owner
+ // The contract owner
?                      +
- address owner = 0x1234;
+ address owner = 0x1234;
?                        +
- // The contract balance
+ // The contract balance
?                        +
- uint256 balance = 10 ether;
+ uint256 balance = 10 ether;
?                            +
- // The withdraw function
+ // The withdraw function
?                         +
- function withdraw() external onlyOwner {
+ function withdraw() external onlyOwner {
?                                         +
-   uint256 balance = address(this).balance;
+   uint256 balance = address(this).balance;
?                                           +
-   if (balance > 0) {
+   if (balance > 0) {
?                     +
-     (bool sent, ) = payable(owner()).call{value: balance}("");
+     (bool sent, ) = payable(owner()).call{value: balance}("");
?                                                               +
-     if (!sent) {
+     if (!sent) {
?                 +
-       revert FailedToSendETH(balance);
+       revert FailedToSendETH(balance);
?                                       +
-     }
+     }
?      +
-   }
+   }
?    +
- }
+ }
?  +
- 
+ 
- ```
+ ```
?    +
- ## Logs
+ ## Logs
?        +
- ```javascript
+ ```javascript
?              +
- Owner calls withdraw()...
+ Owner calls withdraw()...
?                          +
- Owner receives 10 ether...
+ Owner receives 10 ether...
?                           +
- 
+ 
- ```
+ ```
?    +
- ## Recommendation
+ ## Recommendation
?                  +
- ```solidity
+ ```solidity
?            +
- function withdraw() external onlyOwner {
+ function withdraw() external onlyOwner {
?                                         +
-   uint256 balance = address(this).balance;
+   uint256 balance = address(this).balance;
?                                           +
-   // Use require to check the balance and revert with a message if it is zero
+   // Use require to check the balance and revert with a message if it is zero
?                                                                              +
-   require(balance > 0, "No balance to withdraw");
+   require(balance > 0, "No balance to withdraw");
?                                                  +
-   // ...
+   // ...
?         +
- }
+ }
?  +
- 
+ 
  ```