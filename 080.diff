  Sour Cobalt Tardigrade
  
  high
  
  # Potential Owner Address Impersonation (Both Functions): Uncontrolled Contract Pause/Activation
  
- ## Summary
+ ## Summary
?           +
- The functions `activateContract` and `pauseContract` are marked with the `onlyOwner` modifier, which restricts their execution to the owner of the contract. However, the functions do not explicitly check the caller’s address within the function body, which could potentially allow a bypass of the access control mechanism. For example, if the modifier is incorrectly implemented or overridden by a malicious contract, the functions could be executed by an unauthorized user.
+ The functions `activateContract` and `pauseContract` are marked with the `onlyOwner` modifier, which restricts their execution to the owner of the contract. However, the functions do not explicitly check the caller’s address within the function body, which could potentially allow a bypass of the access control mechanism. For example, if the modifier is incorrectly implemented or overridden by a malicious contract, the functions could be executed by an unauthorized user.
?                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           +
- ## Vulnerability Detail
+ ## Vulnerability Detail
?                        +
- - Implicit Trust in Modifier: The functions solely trust the `onlyOwner` modifier to ensure caller verification.
+ - Implicit Trust in Modifier: The functions solely trust the `onlyOwner` modifier to ensure caller verification.
?                                                                                                                 +
- - Attacker Impersonation: A malicious actor exploiting vulnerabilities in the owner account or the modifier implementation could bypass the intended access control.
+ - Attacker Impersonation: A malicious actor exploiting vulnerabilities in the owner account or the modifier implementation could bypass the intended access control.
?                                                                                                                                                                     +
- - Uncontrolled Contract State: This could lead to unauthorized contract pausing or activation, disrupting gameplay, manipulating game mechanics, or causing financial losses
+ - Uncontrolled Contract State: This could lead to unauthorized contract pausing or activation, disrupting gameplay, manipulating game mechanics, or causing financial losses
?                                                                                                                                                                             +
- ## Impact
+ ## Impact
?          +
- - Loss of Control: Malicious actors could gain control over contract pausing/activation, jeopardizing the game's stability and security.
+ - Loss of Control: Malicious actors could gain control over contract pausing/activation, jeopardizing the game's stability and security.
?                                                                                                                                         +
- - Disrupted Gameplay: Unauthorized pauses could halt gameplay during critical moments, frustrating users and impacting game dynamics.
+ - Disrupted Gameplay: Unauthorized pauses could halt gameplay during critical moments, frustrating users and impacting game dynamics.
?                                                                                                                                      +
- - Vulnerability Chain Reaction: Gaining control over these functions might open doors to further exploits.
+ - Vulnerability Chain Reaction: Gaining control over these functions might open doors to further exploits.
?                                                                                                           +
- ## Code Snippet
+ ## Code Snippet
?                +
- https://github.com/sherlock-audit/2023-12-footium/blob/main/footium-eth-shareable/contracts/FootiumAcademy.sol#L77-L87
+ https://github.com/sherlock-audit/2023-12-footium/blob/main/footium-eth-shareable/contracts/FootiumAcademy.sol#L77-L87
?                                                                                                                       +
- ## Tool used
+ ## Tool used
?             +
- - Manual Review
+ - Manual Review
?                +
- ## Test Case and Logs
+ ## Test Case and Logs
?                      +
- A possible test case to demonstrate this vulnerability is:
+ A possible test case to demonstrate this vulnerability is:
?                                                           +
- 
+ 
- - Alice is the owner of the contract and the game.
+ - Alice is the owner of the contract and the game.
?                                                   +
- - Bob is an unauthorized user who wants to pause or activate the contract without Alice’s consent.
+ - Bob is an unauthorized user who wants to pause or activate the contract without Alice’s consent.
?                                                                                                   +
- - Bob deploys a malicious contract that inherits from the FootiumAcademy contract and overrides the onlyOwner modifier to allow anyone to execute the functions.
+ - Bob deploys a malicious contract that inherits from the FootiumAcademy contract and overrides the onlyOwner modifier to allow anyone to execute the functions.
?                                                                                                                                                                 +
- - Bob calls the activateContract or pauseContract function from the malicious contract.
+ - Bob calls the activateContract or pauseContract function from the malicious contract.
?                                                                                        +
- - Bob successfully pauses or activates the contract without Alice’s consent.
+ - Bob successfully pauses or activates the contract without Alice’s consent.
?                                                                             +
- ```solidity
+ ```solidity
?            +
- // Bob deploys a malicious contract that inherits from the FootiumAcademy contract and overrides the onlyOwner modifier
+ // Bob deploys a malicious contract that inherits from the FootiumAcademy contract and overrides the onlyOwner modifier
?                                                                                                                        +
- contract MaliciousContract is FootiumAcademy {
+ contract MaliciousContract is FootiumAcademy {
?                                               +
-     // Override the onlyOwner modifier to allow anyone to execute the functions
+     // Override the onlyOwner modifier to allow anyone to execute the functions
?                                                                                +
-     modifier onlyOwner() {
+     modifier onlyOwner() {
?                           +
-         _;
+         _;
?           +
-     }
+     }
?      +
- }
+ }
?  +
- 
+ 
- MaliciousContract malicious = new MaliciousContract();
+ MaliciousContract malicious = new MaliciousContract();
?                                                       +
- 
+ 
- // Bob calls the activateContract or pauseContract function from the malicious contract
+ // Bob calls the activateContract or pauseContract function from the malicious contract
?                                                                                        +
- malicious.activateContract();
+ malicious.activateContract();
?                              +
- 
+ 
- // Bob successfully activates the contract without Alice's consent
+ // Bob successfully activates the contract without Alice's consent
?                                                                   +
- assert(footium.paused() == false);
+ assert(footium.paused() == false);
?                                   +
- ```
+ ```
?    +
- ## Recommendation
+ ## Recommendation
?                  +
- A possible recommendation to fix this vulnerability is to add an explicit check for the caller’s address within the function body, using the `msg.sender` variable and the owner state variable. This can provide an additional layer of security and prevent potential bypasses of the access control mechanism.
+ A possible recommendation to fix this vulnerability is to add an explicit check for the caller’s address within the function body, using the `msg.sender` variable and the owner state variable. This can provide an additional layer of security and prevent potential bypasses of the access control mechanism.
?                                                                                                                                                                                                                                                                                                                  +
- ```diff
+ ```diff
?        +
- /**
+ /**
?    +
-    * @notice Unpause the contract
+    * @notice Unpause the contract
?                                  +
-    * @dev Only owner address allowed.
+    * @dev Only owner address allowed.
?                                      +
-    */
+    */
?      +
-   function activateContract() external onlyOwner {
+   function activateContract() external onlyOwner {
?                                                   +
- +    // Check if the caller is the owner
+ +    // Check if the caller is the owner
?                                         +
- +    require(msg.sender == owner, "Not the owner");
+ +    require(msg.sender == owner, "Not the owner");
?                                                    +
-     _unpause();
+     _unpause();
?                +
-   }
+   }
?    +
- 
+ 
-   /**
+   /**
?      +
-    * @notice Pause the contract
+    * @notice Pause the contract
?                                +
-    * @dev Only owner address allowed.
+    * @dev Only owner address allowed.
?                                      +
-    */
+    */
?      +
-   function pauseContract() external onlyOwner {
+   function pauseContract() external onlyOwner {
?                                                +
- +    // Check if the caller is the owner
+ +    // Check if the caller is the owner
?                                         +
- +   require(msg.sender == owner, "Not the owner");
+ +   require(msg.sender == owner, "Not the owner");
?                                                   +
-     _pause();
+     _pause();
?              +
-   }
+   }
?    +
- 
+ 
  ```