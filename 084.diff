  Sour Cobalt Tardigrade
  
  medium
  
  # Potential Reentrancy Vulnerability (Both Functions): Risk of Fund Loss During Pauses/Activations
  
- ## Summary
+ ## Summary
?           +
- The functions don't explicitly address the potential reentrancy vulnerability if they perform any external calls (e.g., sending tokens). This could allow attackers to exploit the contract and steal funds.
+ The functions don't explicitly address the potential reentrancy vulnerability if they perform any external calls (e.g., sending tokens). This could allow attackers to exploit the contract and steal funds.
?                                                                                                                                                                                                             +
- ## Vulnerability Detail
+ ## Vulnerability Detail
?                        +
- The functions `activateContract` and `pauseContract` may perform external calls (e.g., sending tokens) as part of their execution. This could make them vulnerable to reentrancy attacks, where an attacker can call the same function again before the previous call is finished, and manipulate the contract state or cause undesired effects.
+ The functions `activateContract` and `pauseContract` may perform external calls (e.g., sending tokens) as part of their execution. This could make them vulnerable to reentrancy attacks, where an attacker can call the same function again before the previous call is finished, and manipulate the contract state or cause undesired effects.
?                                                                                                                                                                                                                                                                                                                                                 +
- ## Impact
+ ## Impact
?          +
- - Financial Loss: Attackers could exploit the reentrancy vulnerability to steal funds from the contract or users' wallets.
+ - Financial Loss: Attackers could exploit the reentrancy vulnerability to steal funds from the contract or users' wallets.
?                                                                                                                           +
- - Contract Disruption: Unexpected reentrancy behavior can disrupt normal contract execution and lead to unintended consequences.
+ - Contract Disruption: Unexpected reentrancy behavior can disrupt normal contract execution and lead to unintended consequences.
?                                                                                                                                 +
- - Loss of Trust: Reentrancy vulnerabilities can erode user trust in the contract's security and stability.
+ - Loss of Trust: Reentrancy vulnerabilities can erode user trust in the contract's security and stability.
?                                                                                                           +
- ## Code Snippet
+ ## Code Snippet
?                +
- https://github.com/sherlock-audit/2023-12-footium/blob/main/footium-eth-shareable/contracts/FootiumAcademy.sol#L77-L87
+ https://github.com/sherlock-audit/2023-12-footium/blob/main/footium-eth-shareable/contracts/FootiumAcademy.sol#L77-L87
?                                                                                                                       +
- ## Tool used
+ ## Tool used
?             +
- - Manual Review
+ - Manual Review
?                +
- ## Test case and logs
+ ## Test case and logs
?                      +
- ### Scenario:
+ ### Scenario:
?              +
-  The contract pauses and sends tokens to an external contract controlled by the attacker.
+  The contract pauses and sends tokens to an external contract controlled by the attacker.
?                                                                                          +
- 
+ 
- ### Attacker's Code:
+ ### Attacker's Code:
?                     +
- ```solidity
+ ```solidity
?            +
- // Craft a malicious contract that re-enters the `pauseContract` function
+ // Craft a malicious contract that re-enters the `pauseContract` function
?                                                                          +
- attackContract = MaliciousContract(address(this));
+ attackContract = MaliciousContract(address(this));
?                                                   +
- 
+ 
- // Trigger the pause, which calls the attacker's contract
+ // Trigger the pause, which calls the attacker's contract
?                                                          +
- activateContract();
+ activateContract();
?                    +
- 
+ 
- // Attacker's contract re-enters and steals funds before the state update
+ // Attacker's contract re-enters and steals funds before the state update
?                                                                          +
- 
+ 
- ```
+ ```
?    +
- ### Expected Logs:
+ ### Expected Logs:
?                   +
- 
+ 
- - Successful contract activation triggers token transfer to the attacker's contract.
+ - Successful contract activation triggers token transfer to the attacker's contract.
?                                                                                     +
- - Unexpected behavior or inconsistencies in the contract state due to reentrancy.
+ - Unexpected behavior or inconsistencies in the contract state due to reentrancy.
?                                                                                  +
- ## Recommendation
+ ## Recommendation
?                  +
- - Implement reentrancy guards or use safe reentrancy patterns to prevent re-entrancy attacks. These mechanisms ensure the contract state update happens before any external calls.
+ - Implement reentrancy guards or use safe reentrancy patterns to prevent re-entrancy attacks. These mechanisms ensure the contract state update happens before any external calls.
?                                                                                                                                                                                   +
- - Consider using established libraries or security tools specifically designed to address reentrancy vulnerabilities.
+ - Consider using established libraries or security tools specifically designed to address reentrancy vulnerabilities.
?                                                                                                                      +
- ```solidity
+ ```solidity
?            +
- // Import the OpenZeppelin library
+ // Import the OpenZeppelin library
?                                   +
- import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
+ import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
?                                                               +
- 
+ 
- // Use the ReentrancyGuard contract
+ // Use the ReentrancyGuard contract
?                                    +
- contract FootiumAcademy is ReentrancyGuard {
+ contract FootiumAcademy is ReentrancyGuard {
?                                             +
-     // Add the nonReentrant modifier to the activateContract and pauseContract functions
+     // Add the nonReentrant modifier to the activateContract and pauseContract functions
?                                                                                         +
-     /**
+     /**
?        +
-    * @notice Unpause the contract
+    * @notice Unpause the contract
?                                  +
-    * @dev Only owner address allowed.
+    * @dev Only owner address allowed.
?                                      +
-    */
+    */
?      +
-   function activateContract() external onlyOwner nonReentrant {
+   function activateContract() external onlyOwner nonReentrant {
?                                                                +
-     _unpause();
+     _unpause();
?                +
-   }
+   }
?    +
- 
+ 
-   /**
+   /**
?      +
-    * @notice Pause the contract
+    * @notice Pause the contract
?                                +
-    * @dev Only owner address allowed.
+    * @dev Only owner address allowed.
?                                      +
-    */
+    */
?      +
-   function pauseContract() external onlyOwner nonReentrant {
+   function pauseContract() external onlyOwner nonReentrant {
?                                                             +
-     _pause();
+     _pause();
?              +
-   }
+   }
?    +
- }
+ }
?  +
- 
+ 
  ```