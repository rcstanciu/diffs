  Sour Cobalt Tardigrade
  
  high
  
  # Minting to Wrong Club :: Unauthorized Player Allocation
  
- ## Summary
+ ## Summary
?           +
- The function relies on the external `_footiumClub.ownerOf` function to verify club ownership before minting a player. This poses a potential security risk if that function is compromised or vulnerable to manipulation.
+ The function relies on the external `_footiumClub.ownerOf` function to verify club ownership before minting a player. This poses a potential security risk if that function is compromised or vulnerable to manipulation.
?                                                                                                                                                                                                                          +
- ## Vulnerability Detail
+ ## Vulnerability Detail
?                        +
- The function `mintPlayer` checks if the caller owns the club to which the player is being minted, using the external `_footiumClub.ownerOf` function. However, this function may not be reliable or secure, as it depends on another contract that may be compromised or vulnerable to manipulation. For example, if the `_footiumClub` contract has a bug or a malicious owner, the `ownerOf` function may return incorrect or inconsistent values, allowing an attacker to mint players to a wrong club even if they don’t own it.
+ The function `mintPlayer` checks if the caller owns the club to which the player is being minted, using the external `_footiumClub.ownerOf` function. However, this function may not be reliable or secure, as it depends on another contract that may be compromised or vulnerable to manipulation. For example, if the `_footiumClub` contract has a bug or a malicious owner, the `ownerOf` function may return incorrect or inconsistent values, allowing an attacker to mint players to a wrong club even if they don’t own it.

- ## Impact
+ ## Impact
?          +
- It can allow unauthorized users to mint players to a wrong club without the owner’s consent. This can compromise the integrity and security of the contract and the game, and cause loss of funds or reputation for the owner and the users.
+ It can allow unauthorized users to mint players to a wrong club without the owner’s consent. This can compromise the integrity and security of the contract and the game, and cause loss of funds or reputation for the owner and the users.
?                                                                                                                                                                                                                                             +
- - Players Minted to Wrong Clubs: Malicious actors could mint players to clubs they don't own, affecting team composition and potentially influencing game outcomes unfairly.
+ - Players Minted to Wrong Clubs: Malicious actors could mint players to clubs they don't own, affecting team composition and potentially influencing game outcomes unfairly.
?                                                                                                                                                                             +
- - Disrupted Marketplace Dynamics: Players minted to the wrong clubs could impact market valuations and create confusion or manipulation opportunities.
+ - Disrupted Marketplace Dynamics: Players minted to the wrong clubs could impact market valuations and create confusion or manipulation opportunities.
?                                                                                                                                                       +
- - Loss of User Confidence and Engagement: Lack of trust in ownership verification can discourage users from actively participating in the game and managing their assets.
+ - Loss of User Confidence and Engagement: Lack of trust in ownership verification can discourage users from actively participating in the game and managing their assets.
?                                                                                                                                                                          +
- ## Code Snippet
+ ## Code Snippet
?                +
- https://github.com/sherlock-audit/2023-12-footium/blob/main/footium-eth-shareable/contracts/FootiumAcademy.sol#L96-L138
+ https://github.com/sherlock-audit/2023-12-footium/blob/main/footium-eth-shareable/contracts/FootiumAcademy.sol#L96-L138
?                                                                                                                        +
- ## Tool used
+ ## Tool used
?             +
- - Manual Review
+ - Manual Review
?                +
- ## Test case and logs
+ ## Test case and logs
?                      +
- A possible test case to demonstrate this vulnerability is:
+ A possible test case to demonstrate this vulnerability is:
?                                                           +
- 
+ 
- - Alice is the owner of the contract and the game.
+ - Alice is the owner of the contract and the game.
?                                                   +
- - Bob is an unauthorized user who wants to mint players to a wrong club.
+ - Bob is an unauthorized user who wants to mint players to a wrong club.
?                                                                         +
- - Bob exploits a bug or a malicious owner in the `_footiumClub` contract, and makes the `ownerOf` function return his address for any club ID.
+ - Bob exploits a bug or a malicious owner in the `_footiumClub` contract, and makes the `ownerOf` function return his address for any club ID.
?                                                                                                                                               +
- - Bob calls the `mintPlayer` function with a valid club ID, player ID, and proof of minting.
+ - Bob calls the `mintPlayer` function with a valid club ID, player ID, and proof of minting.
?                                                                                             +
- - Bob successfully mints the player to a wrong club.
+ - Bob successfully mints the player to a wrong club.
?                                                     +
- 
+ 
- A possible log with code for this test case is:
+ A possible log with code for this test case is:
?                                                +
- ```solidity
+ ```solidity
?            +
- // Bob exploits a bug or a malicious owner in the _footiumClub contract, and makes the ownerOf function return his address for any club ID
+ // Bob exploits a bug or a malicious owner in the _footiumClub contract, and makes the ownerOf function return his address for any club ID
?                                                                                                                                           +
- _footiumClub.exploitBugOrMaliciousOwner();
+ _footiumClub.exploitBugOrMaliciousOwner();
?                                           +
- 
+ 
- // Bob calls the mintPlayer function with a valid club ID, player ID, and proof of minting
+ // Bob calls the mintPlayer function with a valid club ID, player ID, and proof of minting
?                                                                                           +
- footium.mintPlayer(1, "Bob", [0xabcdef123456789]);
+ footium.mintPlayer(1, "Bob", [0xabcdef123456789]);
?                                                   +
- 
+ 
- // Bob successfully mints the player to a wrong club
+ // Bob successfully mints the player to a wrong club
?                                                     +
- assert(footium.ownerOf(1) == Bob);
+ assert(footium.ownerOf(1) == Bob);
?                                   +
- ```
+ ```
?    +
- ## Recommendation
+ ## Recommendation
?                  +
- A possible recommendation to fix this vulnerability is to use a more secure and reliable way of verifying the club ownership, such as using a mapping or a set to store the club IDs and the owners, and checking the caller’s address against the stored value. This can prevent potential manipulation or compromise of the external contract, and ensure that only the legitimate owners can mint players to their clubs.
+ A possible recommendation to fix this vulnerability is to use a more secure and reliable way of verifying the club ownership, such as using a mapping or a set to store the club IDs and the owners, and checking the caller’s address against the stored value. This can prevent potential manipulation or compromise of the external contract, and ensure that only the legitimate owners can mint players to their clubs.
?                                                                                                                                                                                                                                                                                                                                                                                                                             +
- ```solidity
+ ```solidity
?            +
- // Define a mapping to store the club IDs and the owners
+ // Define a mapping to store the club IDs and the owners
?                                                         +
- mapping(uint256 => address) private _clubOwners;
+ mapping(uint256 => address) private _clubOwners;
?                                                 +
- 
+ 
- // Modify the mintPlayer function to use the mapping to verify the club ownership
+ // Modify the mintPlayer function to use the mapping to verify the club ownership
?                                                                                  +
- /**
+ /**
?    +
-    * @notice Mint a player.
+    * @notice Mint a player.
?                            +
-    * @param clubId The ID of the club to receive the players.
+    * @param clubId The ID of the club to receive the players.
?                                                              +
-    * @param playerId The ID of the player to be minted.
+    * @param playerId The ID of the player to be minted.
?                                                        +
-    * @param mintProof The proof that a certain player can be minted.
+    * @param mintProof The proof that a certain player can be minted.
?                                                                     +
-    * @dev Only the owner can mint players to their club.
+    * @dev Only the owner can mint players to their club.
?                                                         +
-    */
+    */
?      +
-   function mintPlayer(
+   function mintPlayer(
?                       +
-     uint256 clubId,
+     uint256 clubId,
?                    +
-     string calldata playerId,
+     string calldata playerId,
?                              +
-     bytes32[] calldata mintProof
+     bytes32[] calldata mintProof
?                                 +
-   ) external payable whenNotPaused nonReentrant {
+   ) external payable whenNotPaused nonReentrant {
?                                                  +
-     // Ensures that the player has not been minted before
+     // Ensures that the player has not been minted before
?                                                          +
-     require(_mintedPlayers[playerId] == false, "Player already minted");
+     require(_mintedPlayers[playerId] == false, "Player already minted");
?                                                                         +
- 
+ 
-     // Ensures that the wallet performing the mint is the owner of the club
+     // Ensures that the wallet performing the mint is the owner of the club
?                                                                            +
-     // to which the player is being minted
+     // to which the player is being minted
?                                           +
-     require(msg.sender == _clubOwners[clubId], "Not club owner");
+     require(msg.sender == _clubOwners[clubId], "Not club owner");
?                                                                  +
- 
+ 
-     // Construct the leaf node to verify the proof
+     // Construct the leaf node to verify the proof
?                                                   +
-     // The leaf node is constructed by concatenating the keccak256 hash of
+     // The leaf node is constructed by concatenating the keccak256 hash of
?                                                                           +
-     // the clubId, playerId and the mint price
+     // the clubId, playerId and the mint price
?                                               +
-     bytes32 leaf = keccak256(
+     bytes32 leaf = keccak256(
?                              +
-       bytes.concat(keccak256(abi.encode(clubId, playerId, msg.value)))
+       bytes.concat(keccak256(abi.encode(clubId, playerId, msg.value)))
?                                                                       +
-     );
+     );
?       +
- 
+ 
-     // Verify the proof
+     // Verify the proof
?                        +
-     require(
+     require(
?             +
-       MerkleProofUpgradeable.verify(mintProof, _merkleRoot, leaf),
+       MerkleProofUpgradeable.verify(mintProof, _merkleRoot, leaf),
?                                                                   +
-       "Invalid proof"
+       "Invalid proof"
?                      +
-     );
+     );
?       +
- 
+ 
-     // Mint the player
+     // Mint the player
?                       +
-     uint256 playerAssetId = _footiumPlayer.safeMint(
+     uint256 playerAssetId = _footiumPlayer.safeMint(
?                                                     +
-       _clubOwners[clubId]
+       _clubOwners[clubId]
?                          +
-     );
+     );
?       +
- 
+ 
-     // Mark the player as minted
+     // Mark the player as minted
?                                 +
-     _mintedPlayers[playerId] = true;
+     _mintedPlayers[playerId] = true;
?                                     +
- 
+ 
-     emit AcademyPlayerMinted(clubId, playerAssetId, playerId, msg.value);
+     emit AcademyPlayerMinted(clubId, playerAssetId, playerId, msg.value);
?                                                                          +
- 
+ 
-     // forward total fee to the prize distributor contract
+     // forward total fee to the prize distributor contract
?                                                           +
-     (bool sent, ) = _prizeDistributorAddress.call{value: msg.value}("");
+     (bool sent, ) = _prizeDistributorAddress.call{value: msg.value}("");
?                                                                         +
-     if (!sent) {
+     if (!sent) {
?                 +
-       revert FailedToSendETH(msg.value);
+       revert FailedToSendETH(msg.value);
?                                         +
-     }
+     }
?      +
-   }
+   }
?    +
- 
+ 
  ```