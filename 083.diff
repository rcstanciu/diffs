  Sour Cobalt Tardigrade
  
  medium
  
  # Opaque Contract State Changes (Both Functions): Difficulty Tracking and Analyzing Pauses/Activations.
  
- ## Summary
+ ## Summary
?           +
- Both functions currently lack any mechanism to specify a reason for pausing or activating the contract. This can lead to confusion among users and hinders post-mortem analysis or understanding the context behind state changes.
+ Both functions currently lack any mechanism to specify a reason for pausing or activating the contract. This can lead to confusion among users and hinders post-mortem analysis or understanding the context behind state changes.
?                                                                                                                                                                                                                                   +
- ## Vulnerability Detail
+ ## Vulnerability Detail
?                        +
- The functions `activateContract` and `pauseContract` do not specify a reason for pausing or activating the contract, or provide a flag to differentiate between planned maintenance and emergency shutdown. This can lead to confusion and hinder user trust, as they may not know why the contract is paused or activated, or when it will resume normal operation.
+ The functions `activateContract` and `pauseContract` do not specify a reason for pausing or activating the contract, or provide a flag to differentiate between planned maintenance and emergency shutdown. This can lead to confusion and hinder user trust, as they may not know why the contract is paused or activated, or when it will resume normal operation.
?                                                                                                                                                                                                                                                                                                                                                                     +
- ## Impact
+ ## Impact
?          +
- - Reduced Transparency: Users are left guessing the motives behind contract pauses/activations, potentially eroding trust and engagement.
+ - Reduced Transparency: Users are left guessing the motives behind contract pauses/activations, potentially eroding trust and engagement.
?                                                                                                                                          +
- - Hindrance in Troubleshooting: Debugging or analyzing past events becomes difficult without proper context for state changes.
+ - Hindrance in Troubleshooting: Debugging or analyzing past events becomes difficult without proper context for state changes.
?                                                                                                                               +
- - Limited Data for Future Optimization: Lack of reasons hinders gathering data and insights for future contract improvements or governance decisions.
+ - Limited Data for Future Optimization: Lack of reasons hinders gathering data and insights for future contract improvements or governance decisions.
?                                                                                                                                                      +
- ## Code Snippet
+ ## Code Snippet
?                +
- https://github.com/sherlock-audit/2023-12-footium/blob/main/footium-eth-shareable/contracts/FootiumAcademy.sol#L77-L87
+ https://github.com/sherlock-audit/2023-12-footium/blob/main/footium-eth-shareable/contracts/FootiumAcademy.sol#L77-L87
?                                                                                                                       +
- ## Tool used
+ ## Tool used
?             +
- - Manual Review
+ - Manual Review
?                +
- ## Test case and logs
+ ## Test case and logs
?                      +
- A possible test case to demonstrate this issue is:
+ A possible test case to demonstrate this issue is:
?                                                   +
- 
+ 
- - Alice is the owner of the contract and the game.
+ - Alice is the owner of the contract and the game.
?                                                   +
- - Alice pauses the contract for a planned maintenance.
+ - Alice pauses the contract for a planned maintenance.
?                                                       +
- - Bob is a user who wants to mint a player.
+ - Bob is a user who wants to mint a player.
?                                            +
- - Bob calls the mint function and gets a revert error due to the contract being paused.
+ - Bob calls the mint function and gets a revert error due to the contract being paused.
?                                                                                        +
- - Bob does not know why the contract is paused or when it will be activated.
+ - Bob does not know why the contract is paused or when it will be activated.
?                                                                             +
- 
+ 
- A possible log with code for this test case is:
+ A possible log with code for this test case is:
?                                                +
- ```solidity
+ ```solidity
?            +
- // Alice pauses the contract for a planned maintenance
+ // Alice pauses the contract for a planned maintenance
?                                                       +
- footium.pauseContract();
+ footium.pauseContract();
?                         +
- 
+ 
- // Bob calls the mint function and gets a revert error due to the contract being paused
+ // Bob calls the mint function and gets a revert error due to the contract being paused
?                                                                                        +
- footium.mint(0xabcdef123456789, 1);
+ footium.mint(0xabcdef123456789, 1);
?                                    +
- 
+ 
- // Bob does not know why the contract is paused or when it will be activated
+ // Bob does not know why the contract is paused or when it will be activated
?                                                                             +
- assert(footium.revertReason() == "Pausable: paused");
+ assert(footium.revertReason() == "Pausable: paused");
?                                                      +
- ```
+ ```
?    +
- ## Recommendation
+ ## Recommendation
?                  +
- A possible recommendation to fix this issue is to add a parameter to the `activateContract` and `pauseContract` functions that specifies the reason for pausing or activating the contract, or provides a flag to differentiate between planned maintenance and emergency shutdown. This can improve the transparency and communication of the contract and the game, and increase user trust and satisfaction.
+ A possible recommendation to fix this issue is to add a parameter to the `activateContract` and `pauseContract` functions that specifies the reason for pausing or activating the contract, or provides a flag to differentiate between planned maintenance and emergency shutdown. This can improve the transparency and communication of the contract and the game, and increase user trust and satisfaction.
?                                                                                                                                                                                                                                                                                                                                                                                                                +
- 
+ 
- A possible code snippet to implement this recommendation is:
+ A possible code snippet to implement this recommendation is:
?                                                             +
- ```solidity
+ ```solidity
?            +
-  // Define an enum for the pause reasons
+  // Define an enum for the pause reasons
?                                         +
-  enum PauseReason { Maintenance, Emergency, Other }
+  enum PauseReason { Maintenance, Emergency, Other }
?                                                    +
- 
+ 
-  // Define a state variable to store the current pause reason
+  // Define a state variable to store the current pause reason
?                                                              +
-  PauseReason public pauseReason;
+  PauseReason public pauseReason;
?                                 +
- 
+ 
- + // Modify the activateContract function to accept a reason parameter
+ + // Modify the activateContract function to accept a reason parameter
?                                                                       +
- /**
+ /**
?    +
-    * @notice Unpause the contract
+    * @notice Unpause the contract
?                                  +
-    * @dev Only owner address allowed.
+    * @dev Only owner address allowed.
?                                      +
-    * @param reason The reason for unpausing the contract
+    * @param reason The reason for unpausing the contract
?                                                         +
-    */
+    */
?      +
-   function activateContract(string memory reason) external onlyOwner {
+   function activateContract(string memory reason) external onlyOwner {
?                                                                       +
-     // Unpause the contract
+     // Unpause the contract
?                            +
-     _unpause();
+     _unpause();
?                +
-     // Emit the event with the reason
+     // Emit the event with the reason
?                                      +
-     emit ActivatedContract(reason);
+     emit ActivatedContract(reason);
?                                    +
-   }
+   }
?    +
- 
+ 
- // Modify the pauseContract function to accept a reason parameter
+ // Modify the pauseContract function to accept a reason parameter
?                                                                  +
- /**
+ /**
?    +
-    * @notice Pause the contract
+    * @notice Pause the contract
?                                +
-    * @dev Only owner address allowed.
+    * @dev Only owner address allowed.
?                                      +
-    * @param reason The reason for pausing the contract
+    * @param reason The reason for pausing the contract
?                                                       +
-    */
+    */
?      +
-   function pauseContract(PauseReason reason) external onlyOwner {
+   function pauseContract(PauseReason reason) external onlyOwner {
?                                                                  +
-     // Pause the contract
+     // Pause the contract
?                          +
-     _pause();
+     _pause();
?              +
-     // Set the pause reason
+     // Set the pause reason
?                            +
-     pauseReason = reason;
+     pauseReason = reason;
?                          +
-    // Emit the event with the reason
+    // Emit the event with the reason
?                                     +
-     emit PausedContract(reason);
+     emit PausedContract(reason);
?                                 +
-   }
+   }
?    +
- 
+ 
  ```