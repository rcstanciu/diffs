  Damaged Aquamarine Swallow
  
  medium
  
  # Merkle leaf values for `claimETHPrize` are 64 bytes before hashing which can lead to merkle tree collisions
  
- ## Summary
+ ## Summary
?           +
- 
+ 
- `FootiumPirzeDistributor::claimETHPrize(...)` function use 64 bytes values to generate the leaf values for the Merkle hash. This might collide with the internal nodes of the merkle tree.
+ `FootiumPirzeDistributor::claimETHPrize(...)` function use 64 bytes values to generate the leaf values for the Merkle hash. This might collide with the internal nodes of the merkle tree.
?                                                                                                                                                                                           +
- 
+ 
- ## Vulnerability Detail
+ ## Vulnerability Detail
?                        +
- 
+ 
- `MerkleProofUpgradeable.sol` puts the following warning at the beginning of the contract:
+ `MerkleProofUpgradeable.sol` puts the following warning at the beginning of the contract:
?                                                                                          +
- 
+ 
- ```solidity
+ ```solidity
?            +
-  * WARNING: You should avoid using leaf values that are 64 bytes long prior to
+  * WARNING: You should avoid using leaf values that are 64 bytes long prior to
?                                                                               +
-  * hashing, or use a hash function other than keccak256 for hashing leaves.
+  * hashing, or use a hash function other than keccak256 for hashing leaves.
?                                                                            +
-  * This is because the concatenation of a sorted pair of internal nodes in
+  * This is because the concatenation of a sorted pair of internal nodes in
?                                                                           +
-  * the Merkle tree could be reinterpreted as a leaf value.
+  * the Merkle tree could be reinterpreted as a leaf value.
?                                                           +
-  ```
+  ```
?     +
-  
+  
?  +
-  This is how the values are calculated in the function:
+  This is how the values are calculated in the function:
?                                                        +
-  ```solidity
+  ```solidity
?             +
-     function claimETHPrize(
+     function claimETHPrize(
?                            +
-         address _to,
+         address _to,
?                     +
-         uint256 _amount,
+         uint256 _amount,
?                         +
-         bytes32[] calldata _proof
+         bytes32[] calldata _proof
?                                  +
-     ) external whenNotPaused nonReentrant {
+     ) external whenNotPaused nonReentrant {
?                                            +
-         // Ensure that the prize receiver is the sender
+         // Ensure that the prize receiver is the sender
?                                                        +
-         if (_to != msg.sender) {
+         if (_to != msg.sender) {
?                                 +
-             revert InvalidAccount();
+             revert InvalidAccount();
?                                     +
-         }
+         }
?          +
- 
+ 
-         // Checks the Merkle proof, which is constructed as a hash of
+         // Checks the Merkle proof, which is constructed as a hash of
?                                                                      +
-         // the token address, the receiver address and the amount
+         // the token address, the receiver address and the amount
?                                                                  +
-         // @audit avoid adding the 64 bytes value as a proof
+         // @audit avoid adding the 64 bytes value as a proof
?                                                             +
-         if (
+         if (
?             +
-             !MerkleProofUpgradeable.verify(
+             !MerkleProofUpgradeable.verify(
?                                            +
-                 _proof,
+                 _proof,
?                        +
-                 ethMerkleRoot,
+                 ethMerkleRoot,
?                               +
- @>                keccak256(abi.encode(_to, _amount))
+ @>                keccak256(abi.encode(_to, _amount))
?                                                      +
-             )
+             )
?              +
-         ) {
+         ) {
?            +
-             revert InvalidETHMerkleProof();
+             revert InvalidETHMerkleProof();
?                                            +
-         }
+         }
?          +
- 
+ 
-         // The amount to be claimed is the difference between the total amount
+         // The amount to be claimed is the difference between the total amount
?                                                                               +
-         // and the amount already claimed.
+         // and the amount already claimed.
?                                           +
-         // This means that the amount passed in the function call is the total
+         // This means that the amount passed in the function call is the total
?                                                                               +
-         // amount that was ever earned by the user.
+         // amount that was ever earned by the user.
?                                                    +
-         uint256 value = _amount - totalETHClaimed[_to];
+         uint256 value = _amount - totalETHClaimed[_to];
?                                                        +
- 
+ 
-         // If there is still an amount to be claimed, transfer the tokens
+         // If there is still an amount to be claimed, transfer the tokens
?                                                                          +
-         if (value > 0) {
+         if (value > 0) {
?                         +
-             totalETHClaimed[_to] += value;
+             totalETHClaimed[_to] += value;
?                                           +
- 
+ 
-             (bool sent, ) = _to.call{value: value}("");
+             (bool sent, ) = _to.call{value: value}("");
?                                                        +
-             if (!sent) {
+             if (!sent) {
?                         +
-                 revert FailedToSendETH(value);
+                 revert FailedToSendETH(value);
?                                               +
-             }
+             }
?              +
-         }
+         }
?          +
- 
+ 
-         emit ClaimETH(_to, value);
+         emit ClaimETH(_to, value);
?                                   +
-     }
+     }
?      +
- ```
+ ```
?    +
-  
+  
?  +
-  This could allow users to claim the ETH not mean for him to claim.
+  This could allow users to claim the ETH not mean for him to claim.
?                                                                    +
- 
+ 
- ## Impact
+ ## Impact
?          +
- 
+ 
- Users can abuse Merkle tree to can claim the ETH not meant for them or this might also lead to make it unclaimable.
+ Users can abuse Merkle tree to can claim the ETH not meant for them or this might also lead to make it unclaimable.
?                                                                                                                    +
- 
+ 
- ## Code Snippet
+ ## Code Snippet
?                +
- 
+ 
- https://github.com/sherlock-audit/2023-12-footium/blob/main/footium-eth-shareable/contracts/FootiumPrizeDistributor.sol#L122C1-L130C10
+ https://github.com/sherlock-audit/2023-12-footium/blob/main/footium-eth-shareable/contracts/FootiumPrizeDistributor.sol#L122C1-L130C10
?                                                                                                                                       +
- 
+ 
- ## Tool used
+ ## Tool used
?             +
- 
+ 
- - Manual Review
+ - Manual Review
?                +
- 
+ 
- ## Recommendation
+ ## Recommendation
?                  +
- Use a combination of variables that doesn't sum to 64 bytes
+ Use a combination of variables that doesn't sum to 64 bytes
?                                                            +
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
